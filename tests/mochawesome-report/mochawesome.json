{
  "stats": {
    "suites": 10,
    "tests": 47,
    "passes": 47,
    "pending": 0,
    "failures": 0,
    "start": "2022-07-22T00:16:28.411Z",
    "end": "2022-07-22T00:19:15.939Z",
    "duration": 167528,
    "testsRegistered": 47,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2ad4206b-d161-41c5-bb03-7b06092008e2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5eb77eb0-b605-4967-90d9-3c94339e0b6b",
          "title": "Contract Deployment",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TB private collection contract deployment should succeed",
              "fullTitle": "Contract Deployment TB private collection contract deployment should succeed",
              "timedOut": false,
              "duration": 2387,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[tb, _] = await deploy(\n    '../contract/tokenized-bond.arl',\n    {\n        parameters: {\n            owner: owner.pkh,\n        },\n        as: owner.pkh,\n    }\n);",
              "err": {},
              "uuid": "e7b31410-8260-4830-b091-96300a66ba0c",
              "parentUUID": "5eb77eb0-b605-4967-90d9-3c94339e0b6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e7b31410-8260-4830-b091-96300a66ba0c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2387,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "ad34f38a-b319-4e75-95b5-040f56c51183",
          "title": "Ownership Transfer",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Transfer ownership as non-owner should fail",
              "fullTitle": "Ownership Transfer Transfer ownership as non-owner should fail",
              "timedOut": false,
              "duration": 2196,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.transfer_ownership({\n        argMichelson: `\"${outsider.pkh}\"`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "948236af-c9e6-4309-8ce2-1063db6b9ddd",
              "parentUUID": "ad34f38a-b319-4e75-95b5-040f56c51183",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Accepts ownership before transfer ownership should fail",
              "fullTitle": "Ownership Transfer Accepts ownership before transfer ownership should fail",
              "timedOut": false,
              "duration": 3766,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.owner_candidate == null);\nawait expectToThrow(async () => {\n    await tb.accept_ownership({\n        as: owner2.pkh,\n    });\n}, errors.NO_CANDIDATE);",
              "err": {},
              "uuid": "3fe02c19-89ea-423d-a929-c3795917b21b",
              "parentUUID": "ad34f38a-b319-4e75-95b5-040f56c51183",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Transfer ownership as owner should succeed",
              "fullTitle": "Ownership Transfer Transfer ownership as owner should succeed",
              "timedOut": false,
              "duration": 3993,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.owner == owner.pkh);\nawait tb.transfer_ownership({\n    argMichelson: `\"${owner2.pkh}\"`,\n    as: owner.pkh,\n});",
              "err": {},
              "uuid": "6e8f0ead-9936-4539-8e5e-d74e77dbca52",
              "parentUUID": "ad34f38a-b319-4e75-95b5-040f56c51183",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Accepts ownership as non-new-onwer should fail",
              "fullTitle": "Ownership Transfer Accepts ownership as non-new-onwer should fail",
              "timedOut": false,
              "duration": 2201,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.accept_ownership({\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "7c00bd62-b9a4-475e-b20b-7cd23f01a789",
              "parentUUID": "ad34f38a-b319-4e75-95b5-040f56c51183",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Accept ownership as new owner should succeed",
              "fullTitle": "Ownership Transfer Accept ownership as new owner should succeed",
              "timedOut": false,
              "duration": 4840,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.owner_candidate == kofi.pkh);\nawait tb.accept_ownership({\n    as: kofi.pkh,\n});\nstorage = await tb.getStorage();\nassert(storage.owner == kofi.pkh);\nassert(storage.owner_candidate == null);\nowner = kofi;",
              "err": {},
              "uuid": "ba25bce6-c5c2-4681-a082-b8806ed0c877",
              "parentUUID": "ad34f38a-b319-4e75-95b5-040f56c51183",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "948236af-c9e6-4309-8ce2-1063db6b9ddd",
            "3fe02c19-89ea-423d-a929-c3795917b21b",
            "6e8f0ead-9936-4539-8e5e-d74e77dbca52",
            "7c00bd62-b9a4-475e-b20b-7cd23f01a789",
            "ba25bce6-c5c2-4681-a082-b8806ed0c877"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16996,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "14204716-ea48-49c2-b00f-bc66dea81b5c",
          "title": "Contract Pause",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Pause contract as non-owner should fail",
              "fullTitle": "Contract Pause Pause contract as non-owner should fail",
              "timedOut": false,
              "duration": 3569,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.paused == false);\nawait expectToThrow(async () => {\n    await tb.pause({\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "2b49eca9-887d-41fa-9a79-a3f11fb9ef7a",
              "parentUUID": "14204716-ea48-49c2-b00f-bc66dea81b5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause contract as owner should succeed",
              "fullTitle": "Contract Pause Pause contract as owner should succeed",
              "timedOut": false,
              "duration": 4492,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.paused == false);\nawait tb.pause({\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\nassert(storage.paused = true)",
              "err": {},
              "uuid": "7710f76b-0086-4cfb-be43-2e4f26acc428",
              "parentUUID": "14204716-ea48-49c2-b00f-bc66dea81b5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause already paused contract should fail",
              "fullTitle": "Contract Pause Pause already paused contract should fail",
              "timedOut": false,
              "duration": 3145,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.paused == true);\nawait expectToThrow(async () => {\n    await tb.pause({\n        as: owner.pkh,\n    });\n}, errors.CONTRACT_PAUSED);",
              "err": {},
              "uuid": "56b2238d-21f2-4bc6-b605-ae86d7f031c1",
              "parentUUID": "14204716-ea48-49c2-b00f-bc66dea81b5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unpause contract as non-owner should fail",
              "fullTitle": "Contract Pause Unpause contract as non-owner should fail",
              "timedOut": false,
              "duration": 3107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.paused == true);\nawait expectToThrow(async () => {\n    await tb.unpause({\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "85923773-45dc-4c21-bb52-86a49b4ccf6e",
              "parentUUID": "14204716-ea48-49c2-b00f-bc66dea81b5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unpause contract as owner should succeed",
              "fullTitle": "Contract Pause Unpause contract as owner should succeed",
              "timedOut": false,
              "duration": 4482,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.paused == true);\nawait tb.unpause({\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\nassert(storage.paused == false)",
              "err": {},
              "uuid": "205daabb-ed71-4a44-a4a3-03c04fb51f02",
              "parentUUID": "14204716-ea48-49c2-b00f-bc66dea81b5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unpause already paused contract should fail",
              "fullTitle": "Contract Pause Unpause already paused contract should fail",
              "timedOut": false,
              "duration": 3024,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.paused == false);\nawait expectToThrow(async () => {\n    await tb.unpause({\n        as: owner.pkh,\n    });\n}, errors.CONTRACT_NOT_PAUSED);",
              "err": {},
              "uuid": "90886c48-35b4-4c7e-a1f3-7605f290f051",
              "parentUUID": "14204716-ea48-49c2-b00f-bc66dea81b5c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b49eca9-887d-41fa-9a79-a3f11fb9ef7a",
            "7710f76b-0086-4cfb-be43-2e4f26acc428",
            "56b2238d-21f2-4bc6-b605-ae86d7f031c1",
            "85923773-45dc-4c21-bb52-86a49b4ccf6e",
            "205daabb-ed71-4a44-a4a3-03c04fb51f02",
            "90886c48-35b4-4c7e-a1f3-7605f290f051"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21819,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "ff5c4f5a-a5b3-4e88-bd5f-6df31b2ce861",
          "title": "Add Minter",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Add minter as non-owner should fail",
              "fullTitle": "Add Minter Add minter as non-owner should fail",
              "timedOut": false,
              "duration": 1967,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.add_minter({\n        argMichelson: `\"${minter1.pkh}\"`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "6b1e2bea-05bf-4fec-b375-473128ae7e34",
              "parentUUID": "ff5c4f5a-a5b3-4e88-bd5f-6df31b2ce861",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add minter as owner should succeed",
              "fullTitle": "Add Minter Add minter as owner should succeed",
              "timedOut": false,
              "duration": 7671,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(generatorLength(storage.minters) == 0);\nawait tb.add_minter({\n    argMichelson: `\"${minter1.pkh}\"`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\nassert(generatorLength(storage.minters) == 1);\nassert(storage.minters.has(minter1.pkh));\nawait tb.add_minter({\n    argMichelson: `\"${outsider.pkh}\"`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\nassert(generatorLength(storage.minters) == 2);\nassert(storage.minters.has(outsider.pkh));",
              "err": {},
              "uuid": "c5c055af-65ad-485a-84e6-17079c32a1b9",
              "parentUUID": "ff5c4f5a-a5b3-4e88-bd5f-6df31b2ce861",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6b1e2bea-05bf-4fec-b375-473128ae7e34",
            "c5c055af-65ad-485a-84e6-17079c32a1b9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9638,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "4f281e99-624c-4d91-953f-b3cb652fee82",
          "title": "Mint",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Mint as non-minter should fail",
              "fullTitle": "Mint Mint as non-minter should fail",
              "timedOut": false,
              "duration": 3062,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(!storage.minters.has(owner.pkh));\nconst currentTokenId = tokenId++;\nawait expectToThrow(async () => {\n    await tb.mint({\n        arg: {\n            itokenid: currentTokenId,\n            rate: [1, 10],\n            iamount: amount,\n            expiration: \"2022-09-31T12:00:00Z\",\n            custodial: true,\n            itokenMetadata: [{ key: '', value: '0x' }]\n        },\n        as: owner.pkh,\n    });\n}, errors.INVALID_CALLER)",
              "err": {},
              "uuid": "ca942083-1516-4968-9a94-b3f48a5efd9d",
              "parentUUID": "4f281e99-624c-4d91-953f-b3cb652fee82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mint with expiration date less than now should fail",
              "fullTitle": "Mint Mint with expiration date less than now should fail",
              "timedOut": false,
              "duration": 3132,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(!storage.minters.has(owner.pkh));\nconst currentTokenId = tokenId++;\nawait expectToThrow(async () => {\n    await tb.mint({\n        arg: {\n            itokenid: currentTokenId,\n            rate: [1, 10],\n            iamount: amount,\n            expiration: \"1995-03-20T00:00:00Z\",\n            custodial: true,\n            itokenMetadata: [{ key: '', value: '0x' }]\n        },\n        as: minter1.pkh,\n    });\n}, errors.MINT_DATE_LOWER)",
              "err": {},
              "uuid": "8966c5f8-7fb2-438a-abbd-5f07e2f6ae31",
              "parentUUID": "4f281e99-624c-4d91-953f-b3cb652fee82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mint with amount <= 0 should fail",
              "fullTitle": "Mint Mint with amount <= 0 should fail",
              "timedOut": false,
              "duration": 3116,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(!storage.minters.has(owner.pkh));\nconst currentTokenId = tokenId++;\nawait expectToThrow(async () => {\n    await tb.mint({\n        arg: {\n            itokenid: currentTokenId,\n            rate: [1, 10],\n            iamount: 0,\n            expiration: \"2023-03-20T00:00:00Z\",\n            custodial: true,\n            itokenMetadata: [{ key: '', value: '0x' }]\n        },\n        as: minter1.pkh,\n    });\n}, errors.MINT_AMOUNT_LOWER)",
              "err": {},
              "uuid": "5b389ea9-8fed-494e-89e4-0c38f66d8cbe",
              "parentUUID": "4f281e99-624c-4d91-953f-b3cb652fee82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mint with rate <= 0 should fail",
              "fullTitle": "Mint Mint with rate <= 0 should fail",
              "timedOut": false,
              "duration": 3060,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(!storage.minters.has(owner.pkh));\nconst currentTokenId = tokenId++;\nawait expectToThrow(async () => {\n    await tb.mint({\n        arg: {\n            itokenid: currentTokenId,\n            rate: [0, 10],\n            iamount: amount2,\n            expiration: \"2023-03-20T00:00:00Z\",\n            custodial: true,\n            itokenMetadata: [{ key: '', value: '0x' }]\n        },\n        as: minter1.pkh,\n    });\n}, errors.MINT_RATE_LOWER)",
              "err": {},
              "uuid": "941c8f94-a05c-42d1-996d-107cd367e44d",
              "parentUUID": "4f281e99-624c-4d91-953f-b3cb652fee82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mint with contract paused should fail",
              "fullTitle": "Mint Mint with contract paused should fail",
              "timedOut": false,
              "duration": 7096,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(!storage.minters.has(owner.pkh));\nconst currentTokenId = tokenId++;\nawait tb.pause({\n    as: owner.pkh,\n});\nawait expectToThrow(async () => {\n    await tb.mint({\n        arg: {\n            itokenid: currentTokenId,\n            rate: [1, 10],\n            iamount: amount,\n            expiration: \"2022-09-31T12:00:00Z\",\n            custodial: true,\n            itokenMetadata: [{ key: '', value: '0x' }]\n        },\n        as: minter1.pkh,\n    });\n}, errors.CONTRACT_PAUSED)\nawait tb.unpause({\n    as: owner.pkh,\n});",
              "err": {},
              "uuid": "36427a21-d141-485d-9d8b-be68f2e04049",
              "parentUUID": "4f281e99-624c-4d91-953f-b3cb652fee82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mint as minter should succeed",
              "fullTitle": "Mint Mint as minter should succeed",
              "timedOut": false,
              "duration": 12685,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.minters.has(minter1.pkh));\nlet currentTokenId = tokenId++;\nawait tb.mint({\n    arg: {\n        itokenid: currentTokenId,\n        rate: [1, 10],\n        iamount: amount,\n        expiration: \"2022-09-31T12:00:00Z\",\n        custodial: true,\n        itokenMetadata: [{ key: '', value: '0x' }]\n    },\n    as: minter1.pkh,\n});\nstorage = await tb.getStorage();\nlet bigId = new BigNumber(currentTokenId);\nassert(hasBigNumber(storage.minters.get(minter1.pkh), bigId))\nlet balance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${currentTokenId} \"${minter1.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount);\nfirstToken = currentTokenId;\ncurrentTokenId++;\nawait tb.mint({\n    arg: {\n        itokenid: currentTokenId,\n        rate: [1, 10],\n        iamount: amount2,\n        expiration: \"2022-09-31T12:00:00Z\",\n        custodial: true,\n        itokenMetadata: [{ key: '', value: '0x' }]\n    },\n    as: outsider.pkh,\n});\nstorage = await tb.getStorage();\nbigId = new BigNumber(currentTokenId);\nassert(hasBigNumber(storage.minters.get(outsider.pkh), bigId))\nbalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${currentTokenId} \"${outsider.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount2);\nsecondToken = currentTokenId;\ncurrentTokenId++;\nawait tb.mint({\n    arg: {\n        itokenid: currentTokenId,\n        rate: [1, 10],\n        iamount: amount3,\n        expiration: \"2022-10-31T12:00:00Z\",\n        custodial: false,\n        itokenMetadata: [{ key: '', value: '0x' }]\n    },\n    as: outsider.pkh,\n});\nstorage = await tb.getStorage();\nbigId = new BigNumber(currentTokenId);\nassert(hasBigNumber(storage.minters.get(outsider.pkh), bigId))\nbalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${currentTokenId} \"${outsider.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount3);\nthirdToken = currentTokenId;",
              "err": {},
              "uuid": "dd63f225-8290-4e5a-8006-d9ff99fa868d",
              "parentUUID": "4f281e99-624c-4d91-953f-b3cb652fee82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mint already minted tokenid should fail",
              "fullTitle": "Mint Mint already minted tokenid should fail",
              "timedOut": false,
              "duration": 1960,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n            await tb.mint({\n                arg: {\n                    itokenid: firstToken,\n                    rate: [1, 10],\n                    iamount: amount,\n                    expiration: \"2022-09-31T12:00:00Z\",\n                    custodial: true,\n                    itokenMetadata: [{ key: '', value: '0x' }]\n                },\n                as: minter1.pkh,\n            });\n        }, errors.NO_DOUBLE_MINTING)",
              "err": {},
              "uuid": "520b32d8-937c-45c2-ba5c-6817c521e95f",
              "parentUUID": "4f281e99-624c-4d91-953f-b3cb652fee82",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca942083-1516-4968-9a94-b3f48a5efd9d",
            "8966c5f8-7fb2-438a-abbd-5f07e2f6ae31",
            "5b389ea9-8fed-494e-89e4-0c38f66d8cbe",
            "941c8f94-a05c-42d1-996d-107cd367e44d",
            "36427a21-d141-485d-9d8b-be68f2e04049",
            "dd63f225-8290-4e5a-8006-d9ff99fa868d",
            "520b32d8-937c-45c2-ba5c-6817c521e95f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "df723978-4408-43d8-9ff9-f25d2ae9cd15",
          "title": "Replace Minter",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Replace minter as non-owner should fail",
              "fullTitle": "Replace Minter Replace minter as non-owner should fail",
              "timedOut": false,
              "duration": 1826,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.replace_minter({\n        arg: {\n            ominter: outsider.pkh,\n            nminter: minter2.pkh\n        },\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "8b23ee39-3584-43df-b3fb-722d3251074b",
              "parentUUID": "df723978-4408-43d8-9ff9-f25d2ae9cd15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Replace non-existent minter should fail",
              "fullTitle": "Replace Minter Replace non-existent minter should fail",
              "timedOut": false,
              "duration": 1832,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.replace_minter({\n        arg: {\n            ominter: minter2.pkh,\n            nminter: owner1.pkh\n        },\n        as: owner.pkh,\n    });\n}, errors.OLD_MINTER_NOT_EXIST);",
              "err": {},
              "uuid": "475aeca8-cf7b-4f2a-90e0-47af6fa5ee46",
              "parentUUID": "df723978-4408-43d8-9ff9-f25d2ae9cd15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Replace with existent minter should fail",
              "fullTitle": "Replace Minter Replace with existent minter should fail",
              "timedOut": false,
              "duration": 1966,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.replace_minter({\n        arg: {\n            ominter: outsider.pkh,\n            nminter: minter1.pkh\n        },\n        as: owner.pkh,\n    });\n}, errors.NEW_MINTER_EXIST);",
              "err": {},
              "uuid": "867aa5a6-4dc2-4b94-8b92-11fecade64c0",
              "parentUUID": "df723978-4408-43d8-9ff9-f25d2ae9cd15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Replace minter as owner should succeed",
              "fullTitle": "Replace Minter Replace minter as owner should succeed",
              "timedOut": false,
              "duration": 5646,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(!storage.minters.has(minter2.pkh));\nassert(storage.minters.has(outsider.pkh));\nconst oldMinterTokens = storage.minters.get(outsider.pkh);\nawait tb.replace_minter({\n    arg: {\n        ominter: outsider.pkh,\n        nminter: minter2.pkh\n    },\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\nassert(storage.minters.has(minter2.pkh));\nassert(!storage.minters.has(outsider.pkh));\nconst newMinterTokens = storage.minters.get(minter2.pkh);\nassert(bigNumberListComp(oldMinterTokens, newMinterTokens));\nfor (const n of newMinterTokens) {\n    const tMeta = await getValueFromBigMap(\n        parseInt(storage.token_metadata),\n        exprMichelineToJson(`${n}`),\n        exprMichelineToJson(`nat'`)\n    );\n    assert(tMeta.args[1].string == minter2.pkh);\n}",
              "err": {},
              "uuid": "5e8cdcf7-f95e-4dc9-87f5-28053dbf100a",
              "parentUUID": "df723978-4408-43d8-9ff9-f25d2ae9cd15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b23ee39-3584-43df-b3fb-722d3251074b",
            "475aeca8-cf7b-4f2a-90e0-47af6fa5ee46",
            "867aa5a6-4dc2-4b94-8b92-11fecade64c0",
            "5e8cdcf7-f95e-4dc9-87f5-28053dbf100a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11270,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "c95d60c4-99d6-4013-b5bf-886b9a97e5c3",
          "title": "Minter as Operator",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Set minter as Operator as non-owner should fail",
              "fullTitle": "Minter as Operator Set minter as Operator as non-owner should fail",
              "timedOut": false,
              "duration": 1890,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.set_minter_as_operator({\n        argMichelson: `${thirdToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "d341d7ab-c7c0-4ff8-9b46-1c59f58315c2",
              "parentUUID": "c95d60c4-99d6-4013-b5bf-886b9a97e5c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Set minter as Operator as owner should succeed",
              "fullTitle": "Minter as Operator Set minter as Operator as owner should succeed",
              "timedOut": false,
              "duration": 5618,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[8].prim == 'False');\nawait tb.set_minter_as_operator({\n    argMichelson: `${thirdToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[8].prim == 'True');",
              "err": {},
              "uuid": "ec2d4544-2952-469a-9385-3203adbf4463",
              "parentUUID": "c95d60c4-99d6-4013-b5bf-886b9a97e5c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unset minter as Operator as non-owner should fail",
              "fullTitle": "Minter as Operator Unset minter as Operator as non-owner should fail",
              "timedOut": false,
              "duration": 1817,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.unset_minter_as_operator({\n        argMichelson: `${thirdToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "5e6301bc-9e46-484b-ab52-9273270ec85a",
              "parentUUID": "c95d60c4-99d6-4013-b5bf-886b9a97e5c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unset minter as Operator as owner should succeed",
              "fullTitle": "Minter as Operator Unset minter as Operator as owner should succeed",
              "timedOut": false,
              "duration": 5649,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[8].prim == 'True');\nawait tb.unset_minter_as_operator({\n    argMichelson: `${thirdToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[8].prim == 'False');",
              "err": {},
              "uuid": "ccee5805-a62f-4cf2-a18a-a2131d122923",
              "parentUUID": "c95d60c4-99d6-4013-b5bf-886b9a97e5c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d341d7ab-c7c0-4ff8-9b46-1c59f58315c2",
            "ec2d4544-2952-469a-9385-3203adbf4463",
            "5e6301bc-9e46-484b-ab52-9273270ec85a",
            "ccee5805-a62f-4cf2-a18a-a2131d122923"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14974,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "fa067f3f-dd13-4be9-af2b-01c0bc1d69c6",
          "title": "Freeze Token",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Freeze Token as non-owner should fail",
              "fullTitle": "Freeze Token Freeze Token as non-owner should fail",
              "timedOut": false,
              "duration": 1822,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.freeze_token({\n        argMichelson: `${firstToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "baaa7ffe-34bb-4317-9b97-27902950f6df",
              "parentUUID": "fa067f3f-dd13-4be9-af2b-01c0bc1d69c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Freeze Token as owner should succeed",
              "fullTitle": "Freeze Token Freeze Token as owner should succeed",
              "timedOut": false,
              "duration": 5643,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${firstToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[7].prim == 'False');\nawait tb.freeze_token({\n    argMichelson: `${firstToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${firstToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[7].prim == 'True');",
              "err": {},
              "uuid": "80f84ddc-d198-485a-9454-55bb38dd769b",
              "parentUUID": "fa067f3f-dd13-4be9-af2b-01c0bc1d69c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Freeze frozen token should fail",
              "fullTitle": "Freeze Token Freeze frozen token should fail",
              "timedOut": false,
              "duration": 1936,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.freeze_token({\n        argMichelson: `${firstToken}`,\n        as: owner.pkh,\n    });\n}, errors.TOKEN_FROZEN);",
              "err": {},
              "uuid": "38194b4d-6e1e-47c3-a2aa-38223c0ccce1",
              "parentUUID": "fa067f3f-dd13-4be9-af2b-01c0bc1d69c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unfreeze Token as non-owner should fail",
              "fullTitle": "Freeze Token Unfreeze Token as non-owner should fail",
              "timedOut": false,
              "duration": 1841,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.unfreeze_token({\n        argMichelson: `${firstToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "0a165f4a-8550-43eb-93b5-4a5f23ecbc70",
              "parentUUID": "fa067f3f-dd13-4be9-af2b-01c0bc1d69c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unfreeze Token as owner should succeed",
              "fullTitle": "Freeze Token Unfreeze Token as owner should succeed",
              "timedOut": false,
              "duration": 5627,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${firstToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[7].prim == 'True');\nawait tb.unfreeze_token({\n    argMichelson: `${firstToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${firstToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[7].prim == 'False');",
              "err": {},
              "uuid": "a35be07b-eaf1-4dac-8326-b6f71331a3a3",
              "parentUUID": "fa067f3f-dd13-4be9-af2b-01c0bc1d69c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unfreeze unfrozen token should fail",
              "fullTitle": "Freeze Token Unfreeze unfrozen token should fail",
              "timedOut": false,
              "duration": 1814,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.unfreeze_token({\n        argMichelson: `${firstToken}`,\n        as: owner.pkh,\n    });\n}, errors.TOKEN_NOT_FROZEN);",
              "err": {},
              "uuid": "3c4e4fef-6317-41b0-9640-57f76c3af8e7",
              "parentUUID": "fa067f3f-dd13-4be9-af2b-01c0bc1d69c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "baaa7ffe-34bb-4317-9b97-27902950f6df",
            "80f84ddc-d198-485a-9454-55bb38dd769b",
            "38194b4d-6e1e-47c3-a2aa-38223c0ccce1",
            "0a165f4a-8550-43eb-93b5-4a5f23ecbc70",
            "a35be07b-eaf1-4dac-8326-b6f71331a3a3",
            "3c4e4fef-6317-41b0-9640-57f76c3af8e7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18683,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "e2c6bd05-4400-43ad-802d-d181d755bd4f",
          "title": "Bond Intertransfer Pause",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Pause intertransfer as non-owner should fail",
              "fullTitle": "Bond Intertransfer Pause Pause intertransfer as non-owner should fail",
              "timedOut": false,
              "duration": 1831,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.pause_inter_transfer({\n        argMichelson: `${thirdToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "7a875381-db5f-435c-91d7-22b2c0756776",
              "parentUUID": "e2c6bd05-4400-43ad-802d-d181d755bd4f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause intertransfer as owner should succeed",
              "fullTitle": "Bond Intertransfer Pause Pause intertransfer as owner should succeed",
              "timedOut": false,
              "duration": 5631,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[5].prim == 'False');\nawait tb.pause_inter_transfer({\n    argMichelson: `${thirdToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[5].prim == 'True');",
              "err": {},
              "uuid": "25faedbf-03e1-4547-9981-174030e50693",
              "parentUUID": "e2c6bd05-4400-43ad-802d-d181d755bd4f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause intertransfer for intertransfer-paused-token should fail",
              "fullTitle": "Bond Intertransfer Pause Pause intertransfer for intertransfer-paused-token should fail",
              "timedOut": false,
              "duration": 1963,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.pause_inter_transfer({\n        argMichelson: `${thirdToken}`,\n        as: owner.pkh,\n    });\n}, errors.INTER_TRANSFER_PAUSED);",
              "err": {},
              "uuid": "1ec9509d-fd0e-493d-aaf2-b79e780d388c",
              "parentUUID": "e2c6bd05-4400-43ad-802d-d181d755bd4f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resume intertransfer as non-owner should fail",
              "fullTitle": "Bond Intertransfer Pause Resume intertransfer as non-owner should fail",
              "timedOut": false,
              "duration": 1837,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.resume_inter_transfer({\n        argMichelson: `${thirdToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "58e99d92-6918-4bf4-add7-c37a1f78ef56",
              "parentUUID": "e2c6bd05-4400-43ad-802d-d181d755bd4f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resume intertransfer as owner should succeed",
              "fullTitle": "Bond Intertransfer Pause Resume intertransfer as owner should succeed",
              "timedOut": false,
              "duration": 5664,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[5].prim == 'True');\nawait tb.resume_inter_transfer({\n    argMichelson: `${thirdToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[5].prim == 'False');",
              "err": {},
              "uuid": "417b0312-960e-46d3-a620-224d0e06caad",
              "parentUUID": "e2c6bd05-4400-43ad-802d-d181d755bd4f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resume intertransfer for unpaused-intertransfer-token should fail",
              "fullTitle": "Bond Intertransfer Pause Resume intertransfer for unpaused-intertransfer-token should fail",
              "timedOut": false,
              "duration": 1840,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.resume_inter_transfer({\n        argMichelson: `${thirdToken}`,\n        as: owner.pkh,\n    });\n}, errors.INTER_TRANSFER_NOT_PAUSED);",
              "err": {},
              "uuid": "edd9adee-868c-49bb-a19d-b3b262189033",
              "parentUUID": "e2c6bd05-4400-43ad-802d-d181d755bd4f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7a875381-db5f-435c-91d7-22b2c0756776",
            "25faedbf-03e1-4547-9981-174030e50693",
            "1ec9509d-fd0e-493d-aaf2-b79e780d388c",
            "58e99d92-6918-4bf4-add7-c37a1f78ef56",
            "417b0312-960e-46d3-a620-224d0e06caad",
            "edd9adee-868c-49bb-a19d-b3b262189033"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18766,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "6ad2211a-645e-4136-a005-40eb6949815b",
          "title": "Bond Intertransfer after Expiry Pause",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Resume intertransfer-expiry as non-owner should fail",
              "fullTitle": "Bond Intertransfer after Expiry Pause Resume intertransfer-expiry as non-owner should fail",
              "timedOut": false,
              "duration": 1959,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.resume_itr_after_expiry({\n        argMichelson: `${thirdToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "3234ea28-5a9f-45bd-b03b-09f7efa2219e",
              "parentUUID": "6ad2211a-645e-4136-a005-40eb6949815b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resume intertransfer-expiry as owner should succeed",
              "fullTitle": "Bond Intertransfer after Expiry Pause Resume intertransfer-expiry as owner should succeed",
              "timedOut": false,
              "duration": 5630,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[6].prim == 'True');\nawait tb.resume_itr_after_expiry({\n    argMichelson: `${thirdToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[6].prim == 'False');",
              "err": {},
              "uuid": "9465f403-aa02-4f2b-9779-18e72b98188c",
              "parentUUID": "6ad2211a-645e-4136-a005-40eb6949815b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resume intertransfer-expiry for unpaused-intertransfer-expiry-token should fail",
              "fullTitle": "Bond Intertransfer after Expiry Pause Resume intertransfer-expiry for unpaused-intertransfer-expiry-token should fail",
              "timedOut": false,
              "duration": 1914,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.resume_itr_after_expiry({\n        argMichelson: `${thirdToken}`,\n        as: owner.pkh,\n    });\n}, errors.INTER_TRANSFER_AFTER_EXPIRY_NOT_PAUSED);",
              "err": {},
              "uuid": "95a8f258-5327-4541-94d7-f76525db8bde",
              "parentUUID": "6ad2211a-645e-4136-a005-40eb6949815b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause intertransfer-expiry as non-owner should fail",
              "fullTitle": "Bond Intertransfer after Expiry Pause Pause intertransfer-expiry as non-owner should fail",
              "timedOut": false,
              "duration": 1833,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.pause_itr_after_expiry({\n        argMichelson: `${thirdToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "3fd1bc75-7674-4a77-b60f-5d70ade8bd1a",
              "parentUUID": "6ad2211a-645e-4136-a005-40eb6949815b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause intertransfer-expiry as owner should succeed",
              "fullTitle": "Bond Intertransfer after Expiry Pause Pause intertransfer-expiry as owner should succeed",
              "timedOut": false,
              "duration": 5655,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[6].prim == 'False');\nawait tb.pause_itr_after_expiry({\n    argMichelson: `${thirdToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[6].prim == 'True');",
              "err": {},
              "uuid": "b2fce290-4a5a-41a0-8646-a5ab1988d256",
              "parentUUID": "6ad2211a-645e-4136-a005-40eb6949815b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause intertransfer-expiry for intertransfer-expiry-paused-token should fail",
              "fullTitle": "Bond Intertransfer after Expiry Pause Pause intertransfer-expiry for intertransfer-expiry-paused-token should fail",
              "timedOut": false,
              "duration": 1872,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.pause_itr_after_expiry({\n        argMichelson: `${thirdToken}`,\n        as: owner.pkh,\n    });\n}, errors.INTER_TRANSFER_AFTER_EXPIRY_PAUSED);",
              "err": {},
              "uuid": "560ac1ec-4154-4634-a87c-39ba6f83cf4a",
              "parentUUID": "6ad2211a-645e-4136-a005-40eb6949815b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3234ea28-5a9f-45bd-b03b-09f7efa2219e",
            "9465f403-aa02-4f2b-9779-18e72b98188c",
            "95a8f258-5327-4541-94d7-f76525db8bde",
            "3fd1bc75-7674-4a77-b60f-5d70ade8bd1a",
            "b2fce290-4a5a-41a0-8646-a5ab1988d256",
            "560ac1ec-4154-4634-a87c-39ba6f83cf4a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18863,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}
{
  "stats": {
    "suites": 4,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-07-23T13:19:50.669Z",
    "end": "2022-07-23T13:20:40.895Z",
    "duration": 50226,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6a7cbeb9-cfd5-4e4e-8d00-a88843cf8bb1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ba73b435-54c9-4523-9994-25003cc462d0",
          "title": "Contract Deployment",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TB private collection contract deployment should succeed",
              "fullTitle": "Contract Deployment TB private collection contract deployment should succeed",
              "timedOut": false,
              "duration": 2212,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[tb, _] = await deploy(\n    '../contract/tokenized-bond.arl',\n    {\n        parameters: {\n            owner: owner.pkh,\n        },\n        as: owner.pkh,\n    }\n);",
              "err": {},
              "uuid": "8ea2a353-cfcc-42ad-94c8-763f4e3810f9",
              "parentUUID": "ba73b435-54c9-4523-9994-25003cc462d0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8ea2a353-cfcc-42ad-94c8-763f4e3810f9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2212,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "5a57ce50-f9f3-4132-ae79-e10050b5b0fd",
          "title": "Add Minter",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Add minter as owner should succeed",
              "fullTitle": "Add Minter Add minter as owner should succeed",
              "timedOut": false,
              "duration": 7703,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(generatorLength(storage.minters) == 0);\nawait tb.add_minter({\n    argMichelson: `\"${minter1.pkh}\"`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\nassert(generatorLength(storage.minters) == 1);\nassert(storage.minters.has(minter1.pkh));\nawait tb.add_minter({\n    argMichelson: `\"${outsider.pkh}\"`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\nassert(generatorLength(storage.minters) == 2);\nassert(storage.minters.has(outsider.pkh));",
              "err": {},
              "uuid": "a734bd9a-f656-421f-856e-63512631fdf7",
              "parentUUID": "5a57ce50-f9f3-4132-ae79-e10050b5b0fd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a734bd9a-f656-421f-856e-63512631fdf7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7703,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "047aca7d-c48e-4202-9f19-6978b8cdddc5",
          "title": "Mint",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Mint as minter should succeed",
              "fullTitle": "Mint Mint as minter should succeed",
              "timedOut": false,
              "duration": 12671,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.minters.has(minter1.pkh));\nlet currentTokenId = tokenId++;\nawait tb.mint({\n    arg: {\n        itokenid: currentTokenId,\n        rate: [1, 10],\n        iamount: amount,\n        expiration: \"2022-09-31T12:00:00Z\",\n        custodial: true,\n        itokenMetadata: [{ key: '', value: '0x' }]\n    },\n    as: minter1.pkh,\n});\nstorage = await tb.getStorage();\nlet bigId = new BigNumber(currentTokenId);\nassert(hasBigNumber(storage.minters.get(minter1.pkh), bigId))\nlet balance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${currentTokenId} \"${minter1.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount);\nfirstToken = currentTokenId;\ncurrentTokenId++;\nawait tb.mint({\n    arg: {\n        itokenid: currentTokenId,\n        rate: [1, 10],\n        iamount: amount2,\n        expiration: \"2022-09-31T12:00:00Z\",\n        custodial: true,\n        itokenMetadata: [{ key: '', value: '0x' }]\n    },\n    as: outsider.pkh,\n});\nstorage = await tb.getStorage();\nbigId = new BigNumber(currentTokenId);\nassert(hasBigNumber(storage.minters.get(outsider.pkh), bigId))\nbalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${currentTokenId} \"${outsider.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount2);\nsecondToken = currentTokenId;\ncurrentTokenId++;\nawait tb.mint({\n    arg: {\n        itokenid: currentTokenId,\n        rate: [1, 10],\n        iamount: amount3,\n        expiration: \"2022-10-31T12:00:00Z\",\n        custodial: false,\n        itokenMetadata: [{ key: '', value: '0x' }]\n    },\n    as: outsider.pkh,\n});\nstorage = await tb.getStorage();\nbigId = new BigNumber(currentTokenId);\nassert(hasBigNumber(storage.minters.get(outsider.pkh), bigId))\nbalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${currentTokenId} \"${outsider.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount3);\nthirdToken = currentTokenId;",
              "err": {},
              "uuid": "13245d92-2c80-4ff2-9519-4c16662983d3",
              "parentUUID": "047aca7d-c48e-4202-9f19-6978b8cdddc5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13245d92-2c80-4ff2-9519-4c16662983d3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12671,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "0e093197-12d3-4050-b654-4ef4ee51b07f",
          "title": "Transfer",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Transfer a token should succeed",
              "fullTitle": "Transfer Transfer a token should succeed",
              "timedOut": false,
              "duration": 16119,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet balance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${firstToken} \"${minter1.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount)\n\nawait tb.transfer({\n    arg: {\n        txs: [\n            [minter1.pkh, [[outsider.pkh, [firstToken, outsiderAmount]]]],\n            [minter1.pkh, [[ama.pkh, [firstToken, amaAmount]]]]\n        ],\n    },\n    as: minter1.pkh,\n});\namount = amount - amaAmount - outsiderAmount;\nstorage = await tb.getStorage();\nbalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${firstToken} \"${minter1.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount)\nlet outsiderBalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${firstToken} \"${outsider.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(outsiderBalance.int) == outsiderAmount)\nlet amaBalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${firstToken} \"${ama.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(amaBalance.int) == amaAmount)\nstorage = await tb.getStorage();\noutsiderBalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${firstToken} \"${outsider.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(outsiderBalance.int) == outsiderAmount)\nawait tb.transfer({\n    arg: {\n        txs: [\n            [outsider.pkh, [[minter1.pkh, [firstToken, outsiderAmount]]]],\n        ],\n    },\n    as: outsider.pkh,\n});\namount = amount + outsiderAmount;\noutsiderBalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${firstToken} \"${outsider.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(outsiderBalance == null);\nawait tb.transfer({\n    arg: {\n        txs: [\n            [minter1.pkh, [[outsider.pkh, [firstToken, outsiderAmount]]]],\n            [minter1.pkh, [[ama.pkh, [firstToken, amaAmount]]]]\n        ],\n    },\n    as: minter1.pkh,\n});\namount = amount - amaAmount - outsiderAmount;\nstorage = await tb.getStorage();\nbalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${firstToken} \"${minter1.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount)\noutsiderBalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${firstToken} \"${outsider.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(outsiderBalance.int) == outsiderAmount)\namaBalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${firstToken} \"${ama.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(amaBalance.int) == amaAmount * 2)",
              "err": {},
              "uuid": "5e813003-98c2-4f14-be8a-9ba23b320486",
              "parentUUID": "0e093197-12d3-4050-b654-4ef4ee51b07f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Transfer tokens by minter on behalf of holder with minter not operator should fail",
              "fullTitle": "Transfer Transfer tokens by minter on behalf of holder with minter not operator should fail",
              "timedOut": false,
              "duration": 5962,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await tb.unset_minter_as_operator({\n    argMichelson: `${firstToken}`,\n    as: owner.pkh,\n});\nawait expectToThrow(async () => {\n    await tb.transfer({\n        arg: {\n            txs: [\n                [outsider.pkh, [[minter1.pkh, [firstToken, 1]]]],\n            ],\n        },\n        as: minter1.pkh,\n    });\n}, errors.FA2_NOT_OPERATOR);\nawait tb.set_minter_as_operator({\n    argMichelson: `${firstToken}`,\n    as: owner.pkh,\n});",
              "err": {},
              "uuid": "da674db5-1ebf-4b3e-93ea-52a99d66e903",
              "parentUUID": "0e093197-12d3-4050-b654-4ef4ee51b07f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Transfer tokens by minter on behalf of holder with minter as operator should succeed",
              "fullTitle": "Transfer Transfer tokens by minter on behalf of holder with minter as operator should succeed",
              "timedOut": false,
              "duration": 5555,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet balance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${firstToken} \"${outsider.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == outsiderAmount)\nawait tb.transfer({\n    arg: {\n        txs: [\n            [outsider.pkh, [[minter1.pkh, [firstToken, 1]]]],\n        ],\n    },\n    as: minter1.pkh,\n});\noutsiderAmount = outsiderAmount -  1;\nstorage = await tb.getStorage();\nbalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${firstToken} \"${outsider.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == outsiderAmount)",
              "err": {},
              "uuid": "31fdfaae-f3cf-43a3-9977-3fd68e45f5cc",
              "parentUUID": "0e093197-12d3-4050-b654-4ef4ee51b07f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5e813003-98c2-4f14-be8a-9ba23b320486",
            "da674db5-1ebf-4b3e-93ea-52a99d66e903",
            "31fdfaae-f3cf-43a3-9977-3fd68e45f5cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27636,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}
{
  "stats": {
    "suites": 14,
    "tests": 66,
    "passes": 66,
    "pending": 0,
    "failures": 0,
    "start": "2022-07-22T12:22:18.890Z",
    "end": "2022-07-22T12:25:42.697Z",
    "duration": 203807,
    "testsRegistered": 66,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "84a14f6e-8fd5-4964-baad-caa073b6e8dc",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "82bd23e0-3746-474b-b8be-d5cd27040537",
          "title": "Contract Deployment",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TB private collection contract deployment should succeed",
              "fullTitle": "Contract Deployment TB private collection contract deployment should succeed",
              "timedOut": false,
              "duration": 1938,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[tb, _] = await deploy(\n    '../contract/tokenized-bond.arl',\n    {\n        parameters: {\n            owner: owner.pkh,\n        },\n        as: owner.pkh,\n    }\n);",
              "err": {},
              "uuid": "7c8eba97-f088-44ad-a4db-93688c430090",
              "parentUUID": "82bd23e0-3746-474b-b8be-d5cd27040537",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7c8eba97-f088-44ad-a4db-93688c430090"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1938,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "7b53b539-6385-4b1d-9394-0f7ff83b5c19",
          "title": "Contract Metadata",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Set metadata called by not owner should fail",
              "fullTitle": "Contract Metadata Set metadata called by not owner should fail",
              "timedOut": false,
              "duration": 1629,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    const argM = `(Pair \"key\" 0x)`;\n    await tb.set_metadata({\n        argMichelson: argM,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "49101b05-69a0-4d4f-a52e-22bfe1d3f901",
              "parentUUID": "7b53b539-6385-4b1d-9394-0f7ff83b5c19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Set metadata with empty content should succeed",
              "fullTitle": "Contract Metadata Set metadata with empty content should succeed",
              "timedOut": false,
              "duration": 3376,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const argM = `(Pair \"key\" 0x)`;\nconst storage = await tb.getStorage();\nawait tb.set_metadata({\n    argMichelson: argM,\n    as: owner.pkh,\n});\nvar metadata = await getValueFromBigMap(\n    parseInt(storage.metadata),\n    exprMichelineToJson(`\"\"`),\n    exprMichelineToJson(`string'`)\n);\nassert(metadata.bytes == '');",
              "err": {},
              "uuid": "e9c9219e-43a7-4bf9-9123-e1d59de3526f",
              "parentUUID": "7b53b539-6385-4b1d-9394-0f7ff83b5c19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Set metadata with valid content should succeed",
              "fullTitle": "Contract Metadata Set metadata with valid content should succeed",
              "timedOut": false,
              "duration": 3396,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bytes =\n    '0x05070707070a00000016016a5569553c34c4bfe352ad21740dea4e2faad3da000a00000004f5f466ab070700000a000000209aabe91d035d02ffb550bb9ea6fe19970f6fb41b5e69459a60b1ae401192a2dc';\nconst argM = `(Pair \"\" ${bytes})`;\nconst storage = await tb.getStorage();\nawait tb.set_metadata({\n    argMichelson: argM,\n    as: owner.pkh,\n});\nvar metadata = await getValueFromBigMap(\n    parseInt(storage.metadata),\n    exprMichelineToJson(`\"\"`),\n    exprMichelineToJson(`string'`)\n);\nassert('0x' + metadata.bytes == bytes);",
              "err": {},
              "uuid": "0434c4ce-b356-4187-98e7-e5bce351c635",
              "parentUUID": "7b53b539-6385-4b1d-9394-0f7ff83b5c19",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "49101b05-69a0-4d4f-a52e-22bfe1d3f901",
            "e9c9219e-43a7-4bf9-9123-e1d59de3526f",
            "0434c4ce-b356-4187-98e7-e5bce351c635"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8401,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "a1a50a67-d8bc-45b2-beb0-420837db7572",
          "title": "Ownership Transfer",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Transfer ownership as non-owner should fail",
              "fullTitle": "Ownership Transfer Transfer ownership as non-owner should fail",
              "timedOut": false,
              "duration": 1634,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.transfer_ownership({\n        argMichelson: `\"${outsider.pkh}\"`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "3317120e-6d4c-46a1-9168-6150c4922e09",
              "parentUUID": "a1a50a67-d8bc-45b2-beb0-420837db7572",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Accepts ownership before transfer ownership should fail",
              "fullTitle": "Ownership Transfer Accepts ownership before transfer ownership should fail",
              "timedOut": false,
              "duration": 2707,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.owner_candidate == null);\nawait expectToThrow(async () => {\n    await tb.accept_ownership({\n        as: owner2.pkh,\n    });\n}, errors.NO_CANDIDATE);",
              "err": {},
              "uuid": "becbb9f3-9f5c-4146-b677-11e3dd61b07f",
              "parentUUID": "a1a50a67-d8bc-45b2-beb0-420837db7572",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Transfer ownership as owner should succeed",
              "fullTitle": "Ownership Transfer Transfer ownership as owner should succeed",
              "timedOut": false,
              "duration": 2877,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.owner == owner.pkh);\nawait tb.transfer_ownership({\n    argMichelson: `\"${owner2.pkh}\"`,\n    as: owner.pkh,\n});",
              "err": {},
              "uuid": "ca14afc2-e1ae-4cc3-9cb0-899255eb6681",
              "parentUUID": "a1a50a67-d8bc-45b2-beb0-420837db7572",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Accepts ownership as non-new-onwer should fail",
              "fullTitle": "Ownership Transfer Accepts ownership as non-new-onwer should fail",
              "timedOut": false,
              "duration": 1623,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.accept_ownership({\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "d12ec9c8-2305-4473-8146-31cb72b0ae4a",
              "parentUUID": "a1a50a67-d8bc-45b2-beb0-420837db7572",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Accept ownership as new owner should succeed",
              "fullTitle": "Ownership Transfer Accept ownership as new owner should succeed",
              "timedOut": false,
              "duration": 3935,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.owner_candidate == owner2.pkh);\nawait tb.accept_ownership({\n    as: owner2.pkh,\n});\nstorage = await tb.getStorage();\nassert(storage.owner == owner2.pkh);\nassert(storage.owner_candidate == null);\nowner = owner2;",
              "err": {},
              "uuid": "8d031c9a-466d-4bf7-9c13-b5f157d7289e",
              "parentUUID": "a1a50a67-d8bc-45b2-beb0-420837db7572",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3317120e-6d4c-46a1-9168-6150c4922e09",
            "becbb9f3-9f5c-4146-b677-11e3dd61b07f",
            "ca14afc2-e1ae-4cc3-9cb0-899255eb6681",
            "d12ec9c8-2305-4473-8146-31cb72b0ae4a",
            "8d031c9a-466d-4bf7-9c13-b5f157d7289e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12776,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "a8f748af-119e-4a0f-a498-1a94588622bf",
          "title": "Contract Pause",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Pause contract as non-owner should fail",
              "fullTitle": "Contract Pause Pause contract as non-owner should fail",
              "timedOut": false,
              "duration": 2715,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.paused == false);\nawait expectToThrow(async () => {\n    await tb.pause({\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "550748da-2619-4acf-83e7-e3b90b88f15b",
              "parentUUID": "a8f748af-119e-4a0f-a498-1a94588622bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause contract as owner should succeed",
              "fullTitle": "Contract Pause Pause contract as owner should succeed",
              "timedOut": false,
              "duration": 3942,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.paused == false);\nawait tb.pause({\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\nassert(storage.paused = true)",
              "err": {},
              "uuid": "d752bf56-45a5-408a-8db5-585afd65e317",
              "parentUUID": "a8f748af-119e-4a0f-a498-1a94588622bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause already paused contract should fail",
              "fullTitle": "Contract Pause Pause already paused contract should fail",
              "timedOut": false,
              "duration": 2706,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.paused == true);\nawait expectToThrow(async () => {\n    await tb.pause({\n        as: owner.pkh,\n    });\n}, errors.CONTRACT_PAUSED);",
              "err": {},
              "uuid": "88a9dece-65b0-4822-8005-d4f07d2e3d2b",
              "parentUUID": "a8f748af-119e-4a0f-a498-1a94588622bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unpause contract as non-owner should fail",
              "fullTitle": "Contract Pause Unpause contract as non-owner should fail",
              "timedOut": false,
              "duration": 2711,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.paused == true);\nawait expectToThrow(async () => {\n    await tb.unpause({\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "87dc9b61-4e8d-4b21-a01f-d0553d698ec8",
              "parentUUID": "a8f748af-119e-4a0f-a498-1a94588622bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unpause contract as owner should succeed",
              "fullTitle": "Contract Pause Unpause contract as owner should succeed",
              "timedOut": false,
              "duration": 3942,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.paused == true);\nawait tb.unpause({\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\nassert(storage.paused == false)",
              "err": {},
              "uuid": "dc55bd4e-d2fa-4d81-93d6-1a1d238ec0c9",
              "parentUUID": "a8f748af-119e-4a0f-a498-1a94588622bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unpause already paused contract should fail",
              "fullTitle": "Contract Pause Unpause already paused contract should fail",
              "timedOut": false,
              "duration": 2709,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.paused == false);\nawait expectToThrow(async () => {\n    await tb.unpause({\n        as: owner.pkh,\n    });\n}, errors.CONTRACT_NOT_PAUSED);",
              "err": {},
              "uuid": "3f373112-160b-4066-a9d4-b4fa669c72a1",
              "parentUUID": "a8f748af-119e-4a0f-a498-1a94588622bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "550748da-2619-4acf-83e7-e3b90b88f15b",
            "d752bf56-45a5-408a-8db5-585afd65e317",
            "88a9dece-65b0-4822-8005-d4f07d2e3d2b",
            "87dc9b61-4e8d-4b21-a01f-d0553d698ec8",
            "dc55bd4e-d2fa-4d81-93d6-1a1d238ec0c9",
            "3f373112-160b-4066-a9d4-b4fa669c72a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18725,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "8bc0431b-cf21-44f1-80aa-731ead29f761",
          "title": "Add Minter",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Add minter as non-owner should fail",
              "fullTitle": "Add Minter Add minter as non-owner should fail",
              "timedOut": false,
              "duration": 1641,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.add_minter({\n        argMichelson: `\"${minter1.pkh}\"`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "e4d1f5f0-84d1-4bdb-8685-2125565e9fd7",
              "parentUUID": "8bc0431b-cf21-44f1-80aa-731ead29f761",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add minter as owner should succeed",
              "fullTitle": "Add Minter Add minter as owner should succeed",
              "timedOut": false,
              "duration": 6780,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(generatorLength(storage.minters) == 0);\nawait tb.add_minter({\n    argMichelson: `\"${minter1.pkh}\"`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\nassert(generatorLength(storage.minters) == 1);\nassert(storage.minters.has(minter1.pkh));\nawait tb.add_minter({\n    argMichelson: `\"${outsider.pkh}\"`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\nassert(generatorLength(storage.minters) == 2);\nassert(storage.minters.has(outsider.pkh));",
              "err": {},
              "uuid": "7bf2d001-c297-4c15-816f-a0438a09866c",
              "parentUUID": "8bc0431b-cf21-44f1-80aa-731ead29f761",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e4d1f5f0-84d1-4bdb-8685-2125565e9fd7",
            "7bf2d001-c297-4c15-816f-a0438a09866c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8421,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "2ecf3c76-0b69-4944-b982-b8adb93fbb91",
          "title": "Mint",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Mint as non-minter should fail",
              "fullTitle": "Mint Mint as non-minter should fail",
              "timedOut": false,
              "duration": 2716,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(!storage.minters.has(owner.pkh));\nconst currentTokenId = tokenId++;\nawait expectToThrow(async () => {\n    await tb.mint({\n        arg: {\n            itokenid: currentTokenId,\n            rate: [1, 10],\n            iamount: amount,\n            expiration: \"2022-09-31T12:00:00Z\",\n            custodial: true,\n            itokenMetadata: [{ key: '', value: '0x' }]\n        },\n        as: owner.pkh,\n    });\n}, errors.INVALID_CALLER)",
              "err": {},
              "uuid": "af2f6b4c-132c-44b2-874a-91b2911624f9",
              "parentUUID": "2ecf3c76-0b69-4944-b982-b8adb93fbb91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mint with expiration date less than now should fail",
              "fullTitle": "Mint Mint with expiration date less than now should fail",
              "timedOut": false,
              "duration": 2710,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(!storage.minters.has(owner.pkh));\nconst currentTokenId = tokenId++;\nawait expectToThrow(async () => {\n    await tb.mint({\n        arg: {\n            itokenid: currentTokenId,\n            rate: [1, 10],\n            iamount: amount,\n            expiration: \"1995-03-20T00:00:00Z\",\n            custodial: true,\n            itokenMetadata: [{ key: '', value: '0x' }]\n        },\n        as: minter1.pkh,\n    });\n}, errors.MINT_DATE_LOWER)",
              "err": {},
              "uuid": "ef8c96fe-6228-441a-92b8-37e3968fb9e7",
              "parentUUID": "2ecf3c76-0b69-4944-b982-b8adb93fbb91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mint with amount <= 0 should fail",
              "fullTitle": "Mint Mint with amount <= 0 should fail",
              "timedOut": false,
              "duration": 2723,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(!storage.minters.has(owner.pkh));\nconst currentTokenId = tokenId++;\nawait expectToThrow(async () => {\n    await tb.mint({\n        arg: {\n            itokenid: currentTokenId,\n            rate: [1, 10],\n            iamount: zero,\n            expiration: \"2023-03-20T00:00:00Z\",\n            custodial: true,\n            itokenMetadata: [{ key: '', value: '0x' }]\n        },\n        as: minter1.pkh,\n    });\n}, errors.MINT_AMOUNT_LOWER)",
              "err": {},
              "uuid": "03897dae-7574-44c7-9a1c-0f8e3f00b736",
              "parentUUID": "2ecf3c76-0b69-4944-b982-b8adb93fbb91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mint with rate <= 0 should fail",
              "fullTitle": "Mint Mint with rate <= 0 should fail",
              "timedOut": false,
              "duration": 2696,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(!storage.minters.has(owner.pkh));\nconst currentTokenId = tokenId++;\nawait expectToThrow(async () => {\n    await tb.mint({\n        arg: {\n            itokenid: currentTokenId,\n            rate: [0, 10],\n            iamount: amount2,\n            expiration: \"2023-03-20T00:00:00Z\",\n            custodial: true,\n            itokenMetadata: [{ key: '', value: '0x' }]\n        },\n        as: minter1.pkh,\n    });\n}, errors.MINT_RATE_LOWER)",
              "err": {},
              "uuid": "0b5b2037-b2af-4bac-a0cf-c2108eda135b",
              "parentUUID": "2ecf3c76-0b69-4944-b982-b8adb93fbb91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mint with contract paused should fail",
              "fullTitle": "Mint Mint with contract paused should fail",
              "timedOut": false,
              "duration": 6328,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(!storage.minters.has(owner.pkh));\nconst currentTokenId = tokenId++;\nawait tb.pause({\n    as: owner.pkh,\n});\nawait expectToThrow(async () => {\n    await tb.mint({\n        arg: {\n            itokenid: currentTokenId,\n            rate: [1, 10],\n            iamount: amount,\n            expiration: \"2022-09-31T12:00:00Z\",\n            custodial: true,\n            itokenMetadata: [{ key: '', value: '0x' }]\n        },\n        as: minter1.pkh,\n    });\n}, errors.CONTRACT_PAUSED)\nawait tb.unpause({\n    as: owner.pkh,\n});",
              "err": {},
              "uuid": "a8357e35-61b2-431c-8499-6d9d72b7dcdb",
              "parentUUID": "2ecf3c76-0b69-4944-b982-b8adb93fbb91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mint as minter should succeed",
              "fullTitle": "Mint Mint as minter should succeed",
              "timedOut": false,
              "duration": 11251,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(storage.minters.has(minter1.pkh));\nlet currentTokenId = tokenId++;\nawait tb.mint({\n    arg: {\n        itokenid: currentTokenId,\n        rate: [1, 10],\n        iamount: amount,\n        expiration: \"2022-09-31T12:00:00Z\",\n        custodial: true,\n        itokenMetadata: [{ key: '', value: '0x' }]\n    },\n    as: minter1.pkh,\n});\nstorage = await tb.getStorage();\nlet bigId = new BigNumber(currentTokenId);\nassert(hasBigNumber(storage.minters.get(minter1.pkh), bigId))\nlet balance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${currentTokenId} \"${minter1.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount);\nfirstToken = currentTokenId;\ncurrentTokenId++;\nawait tb.mint({\n    arg: {\n        itokenid: currentTokenId,\n        rate: [1, 10],\n        iamount: amount2,\n        expiration: \"2022-09-31T12:00:00Z\",\n        custodial: true,\n        itokenMetadata: [{ key: '', value: '0x' }]\n    },\n    as: outsider.pkh,\n});\nstorage = await tb.getStorage();\nbigId = new BigNumber(currentTokenId);\nassert(hasBigNumber(storage.minters.get(outsider.pkh), bigId))\nbalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${currentTokenId} \"${outsider.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount2);\nsecondToken = currentTokenId;\ncurrentTokenId++;\nawait tb.mint({\n    arg: {\n        itokenid: currentTokenId,\n        rate: [1, 10],\n        iamount: amount3,\n        expiration: \"2022-10-31T12:00:00Z\",\n        custodial: false,\n        itokenMetadata: [{ key: '', value: '0x' }]\n    },\n    as: outsider.pkh,\n});\nstorage = await tb.getStorage();\nbigId = new BigNumber(currentTokenId);\nassert(hasBigNumber(storage.minters.get(outsider.pkh), bigId))\nbalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${currentTokenId} \"${outsider.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount3);\nthirdToken = currentTokenId;",
              "err": {},
              "uuid": "fe378722-ddb5-4193-aa3c-7498809f4460",
              "parentUUID": "2ecf3c76-0b69-4944-b982-b8adb93fbb91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mint already minted tokenid should fail",
              "fullTitle": "Mint Mint already minted tokenid should fail",
              "timedOut": false,
              "duration": 1649,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n            await tb.mint({\n                arg: {\n                    itokenid: firstToken,\n                    rate: [1, 10],\n                    iamount: amount,\n                    expiration: \"2022-09-31T12:00:00Z\",\n                    custodial: true,\n                    itokenMetadata: [{ key: '', value: '0x' }]\n                },\n                as: minter1.pkh,\n            });\n        }, errors.NO_DOUBLE_MINTING)",
              "err": {},
              "uuid": "c1a2c451-623b-4995-9fd2-db33ba33acd6",
              "parentUUID": "2ecf3c76-0b69-4944-b982-b8adb93fbb91",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af2f6b4c-132c-44b2-874a-91b2911624f9",
            "ef8c96fe-6228-441a-92b8-37e3968fb9e7",
            "03897dae-7574-44c7-9a1c-0f8e3f00b736",
            "0b5b2037-b2af-4bac-a0cf-c2108eda135b",
            "a8357e35-61b2-431c-8499-6d9d72b7dcdb",
            "fe378722-ddb5-4193-aa3c-7498809f4460",
            "c1a2c451-623b-4995-9fd2-db33ba33acd6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30073,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "a126a7d6-0456-4f05-8ab0-83742160df4e",
          "title": "Replace Minter",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Replace minter as non-owner should fail",
              "fullTitle": "Replace Minter Replace minter as non-owner should fail",
              "timedOut": false,
              "duration": 1632,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.replace_minter({\n        arg: {\n            ominter: outsider.pkh,\n            nminter: minter2.pkh\n        },\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "3e6fcbc9-dffd-4631-837e-8ad9938b00d4",
              "parentUUID": "a126a7d6-0456-4f05-8ab0-83742160df4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Replace non-existent minter should fail",
              "fullTitle": "Replace Minter Replace non-existent minter should fail",
              "timedOut": false,
              "duration": 1647,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.replace_minter({\n        arg: {\n            ominter: minter2.pkh,\n            nminter: owner1.pkh\n        },\n        as: owner.pkh,\n    });\n}, errors.OLD_MINTER_NOT_EXIST);",
              "err": {},
              "uuid": "8ae5a0dc-ef95-4ce9-b2b7-b151dd66a3da",
              "parentUUID": "a126a7d6-0456-4f05-8ab0-83742160df4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Replace with existent minter should fail",
              "fullTitle": "Replace Minter Replace with existent minter should fail",
              "timedOut": false,
              "duration": 1652,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.replace_minter({\n        arg: {\n            ominter: outsider.pkh,\n            nminter: minter1.pkh\n        },\n        as: owner.pkh,\n    });\n}, errors.NEW_MINTER_EXIST);",
              "err": {},
              "uuid": "d94a6175-ccc9-48a4-a060-73f08e446f26",
              "parentUUID": "a126a7d6-0456-4f05-8ab0-83742160df4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Replace minter as owner should succeed",
              "fullTitle": "Replace Minter Replace minter as owner should succeed",
              "timedOut": false,
              "duration": 8152,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nassert(!storage.minters.has(minter2.pkh));\nassert(storage.minters.has(outsider.pkh));\nconst oldMinterTokens = storage.minters.get(outsider.pkh);\nconst oldMinterTokenBalances = {};\nfor (const tokenId of oldMinterTokens) {\n    const balance = await getValueFromBigMap(\n        parseInt(storage.ledger),\n        exprMichelineToJson(`(Pair ${tokenId} \"${outsider.pkh}\")`),\n        exprMichelineToJson(`(pair nat address)'`)\n    );\n    oldMinterTokenBalances[tokenId] = parseInt(balance.int);\n}\nawait tb.replace_minter({\n    arg: {\n        ominter: outsider.pkh,\n        nminter: minter2.pkh\n    },\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\nassert(storage.minters.has(minter2.pkh));\nassert(!storage.minters.has(outsider.pkh));\nconst newMinterTokens = storage.minters.get(minter2.pkh);\nassert(bigNumberListComp(oldMinterTokens, newMinterTokens));\nfor (const n of newMinterTokens) {\n    const tMeta = await getValueFromBigMap(\n        parseInt(storage.token_metadata),\n        exprMichelineToJson(`${n}`),\n        exprMichelineToJson(`nat'`)\n    );\n    assert(tMeta.args[1].string == minter2.pkh);\n    const oldBalance = await getValueFromBigMap(\n        parseInt(storage.ledger),\n        exprMichelineToJson(`(Pair ${n} \"${outsider.pkh}\")`),\n        exprMichelineToJson(`(pair nat address)'`)\n    );\n    assert(oldBalance == null);\n    const newBalance = await getValueFromBigMap(\n        parseInt(storage.ledger),\n        exprMichelineToJson(`(Pair ${n} \"${minter2.pkh}\")`),\n        exprMichelineToJson(`(pair nat address)'`)\n    );\n    assert(parseInt(newBalance.int) == oldMinterTokenBalances[n]);\n}",
              "err": {},
              "uuid": "42bf7fdf-fe40-4b48-bb32-ca09095399a5",
              "parentUUID": "a126a7d6-0456-4f05-8ab0-83742160df4e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3e6fcbc9-dffd-4631-837e-8ad9938b00d4",
            "8ae5a0dc-ef95-4ce9-b2b7-b151dd66a3da",
            "d94a6175-ccc9-48a4-a060-73f08e446f26",
            "42bf7fdf-fe40-4b48-bb32-ca09095399a5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13083,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "187988b1-ea1d-42b6-b30c-2cfc00d339d5",
          "title": "Minter as Operator",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Set minter as Operator as non-owner should fail",
              "fullTitle": "Minter as Operator Set minter as Operator as non-owner should fail",
              "timedOut": false,
              "duration": 1647,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.set_minter_as_operator({\n        argMichelson: `${thirdToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "14b5b37b-7984-4fbb-8286-77bc1a27cab3",
              "parentUUID": "187988b1-ea1d-42b6-b30c-2cfc00d339d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Set minter as Operator as owner should succeed",
              "fullTitle": "Minter as Operator Set minter as Operator as owner should succeed",
              "timedOut": false,
              "duration": 5001,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[8].prim == 'False');\nawait tb.set_minter_as_operator({\n    argMichelson: `${thirdToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[8].prim == 'True');",
              "err": {},
              "uuid": "71d3c7cf-a07a-4031-81df-4eb4d151cbb7",
              "parentUUID": "187988b1-ea1d-42b6-b30c-2cfc00d339d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unset minter as Operator as non-owner should fail",
              "fullTitle": "Minter as Operator Unset minter as Operator as non-owner should fail",
              "timedOut": false,
              "duration": 1634,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.unset_minter_as_operator({\n        argMichelson: `${thirdToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "368ba452-72c2-4573-af7a-26e9875b0a66",
              "parentUUID": "187988b1-ea1d-42b6-b30c-2cfc00d339d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unset minter as Operator as owner should succeed",
              "fullTitle": "Minter as Operator Unset minter as Operator as owner should succeed",
              "timedOut": false,
              "duration": 5055,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[8].prim == 'True');\nawait tb.unset_minter_as_operator({\n    argMichelson: `${thirdToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[8].prim == 'False');",
              "err": {},
              "uuid": "3e46652c-0f8e-4ddf-bdd4-418dedf1b62c",
              "parentUUID": "187988b1-ea1d-42b6-b30c-2cfc00d339d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14b5b37b-7984-4fbb-8286-77bc1a27cab3",
            "71d3c7cf-a07a-4031-81df-4eb4d151cbb7",
            "368ba452-72c2-4573-af7a-26e9875b0a66",
            "3e46652c-0f8e-4ddf-bdd4-418dedf1b62c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13337,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "e1f8bd47-357e-4c78-9b79-b66e2c074445",
          "title": "Freeze Token",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Freeze Token as non-owner should fail",
              "fullTitle": "Freeze Token Freeze Token as non-owner should fail",
              "timedOut": false,
              "duration": 1671,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.freeze_token({\n        argMichelson: `${firstToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "2a4b514a-dfc3-479a-bbb0-2aa95df3b0af",
              "parentUUID": "e1f8bd47-357e-4c78-9b79-b66e2c074445",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Freeze Token as owner should succeed",
              "fullTitle": "Freeze Token Freeze Token as owner should succeed",
              "timedOut": false,
              "duration": 5000,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${firstToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[7].prim == 'False');\nawait tb.freeze_token({\n    argMichelson: `${firstToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${firstToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[7].prim == 'True');",
              "err": {},
              "uuid": "def098e3-fa57-420e-a9a5-a08d41f57ef7",
              "parentUUID": "e1f8bd47-357e-4c78-9b79-b66e2c074445",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Freeze frozen token should fail",
              "fullTitle": "Freeze Token Freeze frozen token should fail",
              "timedOut": false,
              "duration": 1639,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.freeze_token({\n        argMichelson: `${firstToken}`,\n        as: owner.pkh,\n    });\n}, errors.TOKEN_FROZEN);",
              "err": {},
              "uuid": "51c02ecd-7648-4177-8524-d917f64af529",
              "parentUUID": "e1f8bd47-357e-4c78-9b79-b66e2c074445",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unfreeze Token as non-owner should fail",
              "fullTitle": "Freeze Token Unfreeze Token as non-owner should fail",
              "timedOut": false,
              "duration": 1636,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.unfreeze_token({\n        argMichelson: `${firstToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "607cb6dd-e148-4a9d-971a-a98927c034d7",
              "parentUUID": "e1f8bd47-357e-4c78-9b79-b66e2c074445",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unfreeze Token as owner should succeed",
              "fullTitle": "Freeze Token Unfreeze Token as owner should succeed",
              "timedOut": false,
              "duration": 5017,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${firstToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[7].prim == 'True');\nawait tb.unfreeze_token({\n    argMichelson: `${firstToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${firstToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[7].prim == 'False');",
              "err": {},
              "uuid": "71b89552-a17c-4aa9-8363-5946b38c30ef",
              "parentUUID": "e1f8bd47-357e-4c78-9b79-b66e2c074445",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unfreeze unfrozen token should fail",
              "fullTitle": "Freeze Token Unfreeze unfrozen token should fail",
              "timedOut": false,
              "duration": 1638,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.unfreeze_token({\n        argMichelson: `${firstToken}`,\n        as: owner.pkh,\n    });\n}, errors.TOKEN_NOT_FROZEN);",
              "err": {},
              "uuid": "6f32ff89-71e4-4002-9ec9-41e8f404e3dd",
              "parentUUID": "e1f8bd47-357e-4c78-9b79-b66e2c074445",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2a4b514a-dfc3-479a-bbb0-2aa95df3b0af",
            "def098e3-fa57-420e-a9a5-a08d41f57ef7",
            "51c02ecd-7648-4177-8524-d917f64af529",
            "607cb6dd-e148-4a9d-971a-a98927c034d7",
            "71b89552-a17c-4aa9-8363-5946b38c30ef",
            "6f32ff89-71e4-4002-9ec9-41e8f404e3dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16601,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "41e2eb64-91f8-42a5-b616-78926d12545b",
          "title": "Bond Intertransfer Pause",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Pause intertransfer as non-owner should fail",
              "fullTitle": "Bond Intertransfer Pause Pause intertransfer as non-owner should fail",
              "timedOut": false,
              "duration": 1638,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.pause_inter_transfer({\n        argMichelson: `${thirdToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "9cdf7228-8c09-41e8-9225-58131754d16d",
              "parentUUID": "41e2eb64-91f8-42a5-b616-78926d12545b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause intertransfer as owner should succeed",
              "fullTitle": "Bond Intertransfer Pause Pause intertransfer as owner should succeed",
              "timedOut": false,
              "duration": 4979,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[5].prim == 'False');\nawait tb.pause_inter_transfer({\n    argMichelson: `${thirdToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[5].prim == 'True');",
              "err": {},
              "uuid": "b7335139-f299-4819-b6aa-17ca9e6b0814",
              "parentUUID": "41e2eb64-91f8-42a5-b616-78926d12545b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause intertransfer for intertransfer-paused-token should fail",
              "fullTitle": "Bond Intertransfer Pause Pause intertransfer for intertransfer-paused-token should fail",
              "timedOut": false,
              "duration": 1644,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.pause_inter_transfer({\n        argMichelson: `${thirdToken}`,\n        as: owner.pkh,\n    });\n}, errors.INTER_TRANSFER_PAUSED);",
              "err": {},
              "uuid": "690091d8-1915-40ee-90b9-a06c0abed5ce",
              "parentUUID": "41e2eb64-91f8-42a5-b616-78926d12545b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resume intertransfer as non-owner should fail",
              "fullTitle": "Bond Intertransfer Pause Resume intertransfer as non-owner should fail",
              "timedOut": false,
              "duration": 1652,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.resume_inter_transfer({\n        argMichelson: `${thirdToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "77fd99eb-111a-4b0f-a1cf-d9ed640d2075",
              "parentUUID": "41e2eb64-91f8-42a5-b616-78926d12545b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resume intertransfer as owner should succeed",
              "fullTitle": "Bond Intertransfer Pause Resume intertransfer as owner should succeed",
              "timedOut": false,
              "duration": 4972,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[5].prim == 'True');\nawait tb.resume_inter_transfer({\n    argMichelson: `${thirdToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[5].prim == 'False');",
              "err": {},
              "uuid": "861f8522-36ae-4a16-a7d3-fab09558e057",
              "parentUUID": "41e2eb64-91f8-42a5-b616-78926d12545b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resume intertransfer for unpaused-intertransfer-token should fail",
              "fullTitle": "Bond Intertransfer Pause Resume intertransfer for unpaused-intertransfer-token should fail",
              "timedOut": false,
              "duration": 1646,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.resume_inter_transfer({\n        argMichelson: `${thirdToken}`,\n        as: owner.pkh,\n    });\n}, errors.INTER_TRANSFER_NOT_PAUSED);",
              "err": {},
              "uuid": "a9934a8a-6c10-4ad2-8f83-f172872f210b",
              "parentUUID": "41e2eb64-91f8-42a5-b616-78926d12545b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9cdf7228-8c09-41e8-9225-58131754d16d",
            "b7335139-f299-4819-b6aa-17ca9e6b0814",
            "690091d8-1915-40ee-90b9-a06c0abed5ce",
            "77fd99eb-111a-4b0f-a1cf-d9ed640d2075",
            "861f8522-36ae-4a16-a7d3-fab09558e057",
            "a9934a8a-6c10-4ad2-8f83-f172872f210b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16531,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "1a6c8c57-2645-4de1-ad3d-e799d1b814e9",
          "title": "Bond Intertransfer after Expiry Pause",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Resume intertransfer-expiry as non-owner should fail",
              "fullTitle": "Bond Intertransfer after Expiry Pause Resume intertransfer-expiry as non-owner should fail",
              "timedOut": false,
              "duration": 1672,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.resume_itr_after_expiry({\n        argMichelson: `${thirdToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "7bb78957-4975-4a1a-8bcb-40081f1fa62f",
              "parentUUID": "1a6c8c57-2645-4de1-ad3d-e799d1b814e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resume intertransfer-expiry as owner should succeed",
              "fullTitle": "Bond Intertransfer after Expiry Pause Resume intertransfer-expiry as owner should succeed",
              "timedOut": false,
              "duration": 4976,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[6].prim == 'True');\nawait tb.resume_itr_after_expiry({\n    argMichelson: `${thirdToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[6].prim == 'False');",
              "err": {},
              "uuid": "783190a9-d8bd-46cf-8183-5303358e03ef",
              "parentUUID": "1a6c8c57-2645-4de1-ad3d-e799d1b814e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Resume intertransfer-expiry for unpaused-intertransfer-expiry-token should fail",
              "fullTitle": "Bond Intertransfer after Expiry Pause Resume intertransfer-expiry for unpaused-intertransfer-expiry-token should fail",
              "timedOut": false,
              "duration": 1645,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.resume_itr_after_expiry({\n        argMichelson: `${thirdToken}`,\n        as: owner.pkh,\n    });\n}, errors.INTER_TRANSFER_AFTER_EXPIRY_NOT_PAUSED);",
              "err": {},
              "uuid": "2c643950-bf37-4804-b78a-e1153eed2847",
              "parentUUID": "1a6c8c57-2645-4de1-ad3d-e799d1b814e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause intertransfer-expiry as non-owner should fail",
              "fullTitle": "Bond Intertransfer after Expiry Pause Pause intertransfer-expiry as non-owner should fail",
              "timedOut": false,
              "duration": 1666,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.pause_itr_after_expiry({\n        argMichelson: `${thirdToken}`,\n        as: outsider.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "3f43005b-134c-408e-b02c-af1873e90d61",
              "parentUUID": "1a6c8c57-2645-4de1-ad3d-e799d1b814e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause intertransfer-expiry as owner should succeed",
              "fullTitle": "Bond Intertransfer after Expiry Pause Pause intertransfer-expiry as owner should succeed",
              "timedOut": false,
              "duration": 4989,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[6].prim == 'False');\nawait tb.pause_itr_after_expiry({\n    argMichelson: `${thirdToken}`,\n    as: owner.pkh,\n});\nstorage = await tb.getStorage();\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta.args[6].prim == 'True');",
              "err": {},
              "uuid": "c8af9f64-20b4-494d-b0d3-49cc270c8bbe",
              "parentUUID": "1a6c8c57-2645-4de1-ad3d-e799d1b814e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pause intertransfer-expiry for intertransfer-expiry-paused-token should fail",
              "fullTitle": "Bond Intertransfer after Expiry Pause Pause intertransfer-expiry for intertransfer-expiry-paused-token should fail",
              "timedOut": false,
              "duration": 1674,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.pause_itr_after_expiry({\n        argMichelson: `${thirdToken}`,\n        as: owner.pkh,\n    });\n}, errors.INTER_TRANSFER_AFTER_EXPIRY_PAUSED);",
              "err": {},
              "uuid": "fdf50333-2669-4dc7-8ce1-ab9d7edcc92f",
              "parentUUID": "1a6c8c57-2645-4de1-ad3d-e799d1b814e9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7bb78957-4975-4a1a-8bcb-40081f1fa62f",
            "783190a9-d8bd-46cf-8183-5303358e03ef",
            "2c643950-bf37-4804-b78a-e1153eed2847",
            "3f43005b-134c-408e-b02c-af1873e90d61",
            "c8af9f64-20b4-494d-b0d3-49cc270c8bbe",
            "fdf50333-2669-4dc7-8ce1-ab9d7edcc92f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16622,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "f7eda12f-4be1-49ae-8cb0-6b492a27d76e",
          "title": "Burn Token",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Burn as non-minter should fail",
              "fullTitle": "Burn Token Burn as non-minter should fail",
              "timedOut": false,
              "duration": 1660,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.burn({\n        arg: {\n            itokenid: thirdToken,\n            iamount: burnAmount,\n        },\n        as: owner.pkh,\n    });\n}, errors.INVALID_CALLER);",
              "err": {},
              "uuid": "288e366f-fb05-463b-b447-d0dc188fd7f2",
              "parentUUID": "f7eda12f-4be1-49ae-8cb0-6b492a27d76e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Burn in paused mode should fail",
              "fullTitle": "Burn Token Burn in paused mode should fail",
              "timedOut": false,
              "duration": 5341,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await tb.pause({\n    as: owner.pkh,\n});\nawait expectToThrow(async () => {\n    await tb.burn({\n        arg: {\n            itokenid: thirdToken,\n            iamount: burnAmount,\n        },\n        as: minter2.pkh,\n    });\n}, errors.CONTRACT_PAUSED);\nawait tb.unpause({\n    as: owner.pkh,\n});",
              "err": {},
              "uuid": "c55c71b5-2366-446a-938b-78d4aa2f3f58",
              "parentUUID": "f7eda12f-4be1-49ae-8cb0-6b492a27d76e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Burn amount <= 0 should fail",
              "fullTitle": "Burn Token Burn amount <= 0 should fail",
              "timedOut": false,
              "duration": 1671,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.burn({\n        arg: {\n            itokenid: thirdToken,\n            iamount: zero,\n        },\n        as: minter2.pkh,\n    });\n}, errors.BURN_AMOUNT_LOWER);",
              "err": {},
              "uuid": "5d6f21bd-22cc-41db-8bd9-17fa15a479ad",
              "parentUUID": "f7eda12f-4be1-49ae-8cb0-6b492a27d76e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Burn amount greater than token amount should fail",
              "fullTitle": "Burn Token Burn amount greater than token amount should fail",
              "timedOut": false,
              "duration": 1666,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.burn({\n        arg: {\n            itokenid: thirdToken,\n            iamount: amount2,\n        },\n        as: minter2.pkh,\n    });\n}, errors.FA2_INSUFFICIENT_BALANCE);",
              "err": {},
              "uuid": "5a3d34a4-031f-4568-8e01-b3af95f1ad37",
              "parentUUID": "f7eda12f-4be1-49ae-8cb0-6b492a27d76e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Burn with non-existent token should fail",
              "fullTitle": "Burn Token Burn with non-existent token should fail",
              "timedOut": false,
              "duration": 1663,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.burn({\n        arg: {\n            itokenid: invalidToken,\n            iamount: amount3,\n        },\n        as: minter2.pkh,\n    });\n}, errors.FA2_INSUFFICIENT_BALANCE);",
              "err": {},
              "uuid": "103511cc-0f94-4a74-ba75-fd6db0d21e9b",
              "parentUUID": "f7eda12f-4be1-49ae-8cb0-6b492a27d76e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Burn token by non-minter should fail",
              "fullTitle": "Burn Token Burn token by non-minter should fail",
              "timedOut": false,
              "duration": 1678,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.burn({\n        arg: {\n            itokenid: firstToken,\n            iamount: amount,\n        },\n        as: minter2.pkh,\n    });\n}, errors.FA2_INSUFFICIENT_BALANCE);",
              "err": {},
              "uuid": "ba7b44c8-4fd4-4c5a-8197-90de0d741406",
              "parentUUID": "f7eda12f-4be1-49ae-8cb0-6b492a27d76e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Burn token should succeed",
              "fullTitle": "Burn Token Burn token should succeed",
              "timedOut": false,
              "duration": 5001,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet balance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${thirdToken} \"${minter2.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount3);\nawait tb.burn({\n    arg: {\n        itokenid: thirdToken,\n        iamount: burnAmount,\n    },\n    as: minter2.pkh,\n});\namount3 = amount3 - burnAmount;\nstorage = await tb.getStorage();\nbalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${thirdToken} \"${minter2.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount3);",
              "err": {},
              "uuid": "66664eb4-592a-4edb-9d04-3a71500e1e6a",
              "parentUUID": "f7eda12f-4be1-49ae-8cb0-6b492a27d76e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Burn all token should remove token & metadata should succeed ",
              "fullTitle": "Burn Token Burn all token should remove token & metadata should succeed ",
              "timedOut": false,
              "duration": 6051,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let storage = await tb.getStorage();\nlet balance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${thirdToken} \"${minter2.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(parseInt(balance.int) == amount3);\nlet tMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta != null);\nawait tb.burn({\n    arg: {\n        itokenid: thirdToken,\n        iamount: amount3,\n    },\n    as: minter2.pkh,\n});\nstorage = await tb.getStorage();\nbalance = await getValueFromBigMap(\n    parseInt(storage.ledger),\n    exprMichelineToJson(`(Pair ${thirdToken} \"${minter2.pkh}\")`),\n    exprMichelineToJson(`(pair nat address)'`)\n);\nassert(balance == null);\ntMeta = await getValueFromBigMap(\n    parseInt(storage.token_metadata),\n    exprMichelineToJson(`${thirdToken}`),\n    exprMichelineToJson(`nat'`)\n);\nassert(tMeta == null);",
              "err": {},
              "uuid": "46d7cd8a-c4cc-4634-bf6f-145ed0f6673a",
              "parentUUID": "f7eda12f-4be1-49ae-8cb0-6b492a27d76e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "288e366f-fb05-463b-b447-d0dc188fd7f2",
            "c55c71b5-2366-446a-938b-78d4aa2f3f58",
            "5d6f21bd-22cc-41db-8bd9-17fa15a479ad",
            "5a3d34a4-031f-4568-8e01-b3af95f1ad37",
            "103511cc-0f94-4a74-ba75-fd6db0d21e9b",
            "ba7b44c8-4fd4-4c5a-8197-90de0d741406",
            "66664eb4-592a-4edb-9d04-3a71500e1e6a",
            "46d7cd8a-c4cc-4634-bf6f-145ed0f6673a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24731,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "291be6d8-1381-45f4-bac5-01dd09834016",
          "title": "Operator",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Add an operator for ourself should succeed",
              "fullTitle": "Operator Add an operator for ourself should succeed",
              "timedOut": false,
              "duration": 3912,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const storage = await tb.getStorage();\nlet initialOperators = await getValueFromBigMap(\n    parseInt(storage.operator),\n    exprMichelineToJson(\n        `(Pair \"${tb.address}\" (Pair ${firstToken} \"${outsider.pkh}\"))`\n    ),\n    exprMichelineToJson(`(pair address (pair nat address))'`)\n);\nassert(initialOperators == null);\nawait tb.update_operators({\n    argMichelson: `{Left (Pair \"${outsider.pkh}\" \"${tb.address}\" ${firstToken})}`,\n    as: outsider.pkh,\n});\nlet operatorsAfterAdd = await getValueFromBigMap(\n    parseInt(storage.operator),\n    exprMichelineToJson(\n        `(Pair \"${tb.address}\" (Pair ${firstToken} \"${outsider.pkh}\"))`\n    ),\n    exprMichelineToJson(`(pair address (pair nat address))'`)\n);\nassert(operatorsAfterAdd.prim == 'Unit');",
              "err": {},
              "uuid": "59cc17a5-d195-4723-b027-15153ba4dd45",
              "parentUUID": "291be6d8-1381-45f4-bac5-01dd09834016",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove a non existing operator should succeed",
              "fullTitle": "Operator Remove a non existing operator should succeed",
              "timedOut": false,
              "duration": 1808,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await tb.update_operators({\n    argMichelson: `{Right (Pair \"${outsider.pkh}\" \"${ama.pkh}\" ${firstToken})}`,\n    as: outsider.pkh,\n});",
              "err": {},
              "uuid": "6adcb869-54f3-407a-9167-6496c468b7c7",
              "parentUUID": "291be6d8-1381-45f4-bac5-01dd09834016",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove an existing operator for another user should fail",
              "fullTitle": "Operator Remove an existing operator for another user should fail",
              "timedOut": false,
              "duration": 1647,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.update_operators({\n        argMichelson: `{Right (Pair \"${outsider.pkh}\" \"${tb.address}\" ${firstToken})}`,\n        as: ama.pkh,\n    });\n}, errors.CALLER_NOT_OWNER);",
              "err": {},
              "uuid": "18f5c9e9-3aa1-441c-9310-edefbbb7ca6a",
              "parentUUID": "291be6d8-1381-45f4-bac5-01dd09834016",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add operator for another user should fail",
              "fullTitle": "Operator Add operator for another user should fail",
              "timedOut": false,
              "duration": 1642,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await expectToThrow(async () => {\n    await tb.update_operators({\n        argMichelson: `{Left (Pair \"${owner.pkh}\" \"${tb.address}\" ${firstToken})}`,\n        as: outsider.pkh,\n    });\n}, errors.CALLER_NOT_OWNER);",
              "err": {},
              "uuid": "fab660f3-95db-4cbd-9efc-2ef0e9b50dfc",
              "parentUUID": "291be6d8-1381-45f4-bac5-01dd09834016",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove an existing operator should succeed",
              "fullTitle": "Operator Remove an existing operator should succeed",
              "timedOut": false,
              "duration": 3889,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const storage = await tb.getStorage();\nvar initialOperators = await getValueFromBigMap(\n    parseInt(storage.operator),\n    exprMichelineToJson(\n        `(Pair \"${tb.address}\" (Pair ${firstToken} \"${outsider.pkh}\"))`\n    ),\n    exprMichelineToJson(`(pair address (pair nat address))'`)\n);\nassert(initialOperators.prim == 'Unit');\nawait tb.update_operators({\n    argMichelson: `{Right (Pair \"${outsider.pkh}\" \"${tb.address}\" ${firstToken})}`,\n    as: outsider.pkh,\n});\nvar operatorsAfterRemoval = await getValueFromBigMap(\n    parseInt(storage.operator),\n    exprMichelineToJson(\n        `(Pair \"${tb.address}\" (Pair ${firstToken} \"${outsider.pkh}\"))`\n    ),\n    exprMichelineToJson(`(pair address (pair nat address))'`)\n);\nassert(operatorsAfterRemoval == null);",
              "err": {},
              "uuid": "9b178656-8244-4a08-9d16-26e79e28cd2e",
              "parentUUID": "291be6d8-1381-45f4-bac5-01dd09834016",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59cc17a5-d195-4723-b027-15153ba4dd45",
            "6adcb869-54f3-407a-9167-6496c468b7c7",
            "18f5c9e9-3aa1-441c-9310-edefbbb7ca6a",
            "fab660f3-95db-4cbd-9efc-2ef0e9b50dfc",
            "9b178656-8244-4a08-9d16-26e79e28cd2e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12898,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "93d40952-531b-44a6-ac5c-8b33e7d3796e",
          "title": "Operator for All",
          "fullFile": "/home/baahkusi/repos/ejara/tokenized-contract/tests/tokenized-bond.js",
          "file": "/tokenized-bond.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Add an operator for all for ourself should succeed",
              "fullTitle": "Operator for All Add an operator for all for ourself should succeed",
              "timedOut": false,
              "duration": 3905,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const storage = await tb.getStorage();\nvar initialOperators = await getValueFromBigMap(\n    parseInt(storage.operator_for_all),\n    exprMichelineToJson(\n        `(Pair \"${tb.address}\" \"${outsider.pkh}\"))`\n    ),\n    exprMichelineToJson(`(pair address address)'`)\n);\nassert(initialOperators == null);\nawait tb.update_operators_for_all({\n    argJsonMichelson: mkApproveForAllSingle(tb.address),\n    as: outsider.pkh\n});\nvar operatorsAfterAdd = await getValueFromBigMap(\n    parseInt(storage.operator_for_all),\n    exprMichelineToJson(\n        `(Pair \"${tb.address}\" \"${outsider.pkh}\")`\n    ),\n    exprMichelineToJson(`(pair address address)'`)\n);\nassert(operatorsAfterAdd.prim == 'Unit');",
              "err": {},
              "uuid": "4625233c-c001-41c1-bb4e-45f159153c95",
              "parentUUID": "93d40952-531b-44a6-ac5c-8b33e7d3796e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove a non existing operator should succeed",
              "fullTitle": "Operator for All Remove a non existing operator should succeed",
              "timedOut": false,
              "duration": 1801,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await tb.update_operators_for_all({\n    argJsonMichelson: mkDeleteApproveForAllSingle(ama.pkh),\n    as: outsider.pkh\n});",
              "err": {},
              "uuid": "1659a388-c4a4-4ab0-9f15-ed61c8a3afbd",
              "parentUUID": "93d40952-531b-44a6-ac5c-8b33e7d3796e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove an existing operator should succeed",
              "fullTitle": "Operator for All Remove an existing operator should succeed",
              "timedOut": false,
              "duration": 3942,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const storage = await tb.getStorage();\nvar initialOperators = await getValueFromBigMap(\n    parseInt(storage.operator_for_all),\n    exprMichelineToJson(\n        `(Pair \"${tb.address}\" \"${outsider.pkh}\")`\n    ),\n    exprMichelineToJson(`(pair address address)'`)\n);\nassert(initialOperators.prim == \"Unit\");\nawait tb.update_operators_for_all({\n    argJsonMichelson: mkDeleteApproveForAllSingle(tb.address),\n    as: outsider.pkh\n});\nvar operatorsAfterRemoval = await getValueFromBigMap(\n    parseInt(storage.operator_for_all),\n    exprMichelineToJson(\n        `(Pair \"${tb.address}\" \"${outsider.pkh}\")`\n    ),\n    exprMichelineToJson(`(pair address address)'`)\n);\nassert(operatorsAfterRemoval == null);",
              "err": {},
              "uuid": "da8cd212-54bd-4091-8df2-072393870e40",
              "parentUUID": "93d40952-531b-44a6-ac5c-8b33e7d3796e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4625233c-c001-41c1-bb4e-45f159153c95",
            "1659a388-c4a4-4ab0-9f15-ed61c8a3afbd",
            "da8cd212-54bd-4091-8df2-072393870e40"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9648,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}